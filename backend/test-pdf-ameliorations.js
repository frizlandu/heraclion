// Test des am√©liorations visuelles du PDF
const path = require('path');
const fs = require('fs');

const exportService = require('./services/exportService');

async function testAm√©liorationsVisuelles() {
    try {
        console.log('üé® Test des am√©liorations visuelles PDF...');

        // Test 1: Facture NON-TRANSPORT avec plusieurs lignes
        console.log('\nüìã Test 1: Facture NON-TRANSPORT (Pr√©sentation am√©lior√©e)');
        const factureNonTransport = {
            id: 1,
            numero: 'F2025-001',
            type_document: 'facture',
            categorie_facture: 'non-transport',
            date_emission: new Date(),
            date_echeance: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            client_nom: 'Entreprise ABC Solutions',
            client_adresse: '123 Boulevard de la Innovation\n75001 Paris',
            client_ville: 'Paris, France',
            client_email: 'contact@abc-solutions.fr',
            montant_ht: 2500,
            montant_tva: 500,
            montant_ttc: 3000,
            notes: 'Facture pour services de d√©veloppement logiciel. Paiement √† 30 jours. Merci pour votre confiance.',
            conditions_paiement: '30 jours net'
        };

        const lignesNonTransport = [
            {
                id: 1,
                item: 'DEV001',
                description: 'D√©veloppement application web React',
                unite: 'jour',
                quantite: 10,
                prix_unitaire: 150,
                montant_ht: 1500,
                taux_tva: 20,
                montant_tva: 300,
                montant_ttc: 1800
            },
            {
                id: 2,
                item: 'DEV002',
                description: 'API Backend Node.js avec base PostgreSQL',
                unite: 'jour',
                quantite: 8,
                prix_unitaire: 125,
                montant_ht: 1000,
                taux_tva: 20,
                montant_tva: 200,
                montant_ttc: 1200
            }
        ];

        console.log('üìÑ G√©n√©ration PDF non-transport am√©lior√©...');
        const pdfNonTransport = await exportService.generateDocumentPdf(factureNonTransport, lignesNonTransport);
        const pathNonTransport = path.join(__dirname, 'pdf-ameliore-non-transport.pdf');
        fs.writeFileSync(pathNonTransport, pdfNonTransport);
        console.log(`‚úÖ PDF non-transport g√©n√©r√©: ${pathNonTransport}`);

        // Test 2: Facture TRANSPORT avec nombreuses lignes pour tester la pagination
        console.log('\nüöõ Test 2: Facture TRANSPORT (Avec pagination)');
        const factureTransport = {
            id: 2,
            numero: 'F2025-002',
            type_document: 'facture',
            categorie_facture: 'transport',
            date_emission: new Date(),
            date_echeance: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            client_nom: 'Logistique Express SARL',
            client_adresse: '456 Route Nationale\n69000 Lyon',
            client_ville: 'Lyon, France',
            client_email: 'factures@logistique-express.com',
            montant_ht: 4500,
            montant_tva: 900,
            montant_ttc: 5400,
            notes: 'Transport de marchandises diverses selon contrat cadre. Livraison express confirm√©e.',
            lieu_chargement: 'Entrep√¥t Marseille Port',
            lieu_livraison: 'Centre de distribution Lyon'
        };

        // Cr√©er plusieurs lignes pour tester la pagination
        const lignesTransport = [];
        for (let i = 1; i <= 15; i++) {
            lignesTransport.push({
                id: i,
                item: `TR${i.toString().padStart(3, '0')}`,
                description: `Transport marchandises lot ${i} - Colis divers`,
                date_transport: new Date(Date.now() - i * 24 * 60 * 60 * 1000),
                plaque_immat: `${String.fromCharCode(65 + (i % 26))}${String.fromCharCode(66 + (i % 25))}-${(100 + i).toString().slice(-3)}-${String.fromCharCode(67 + (i % 24))}${String.fromCharCode(68 + (i % 23))}`,
                ticket: `T${(100000 + i * 123).toString()}`,
                tonnes: (Math.random() * 20 + 5).toFixed(2),
                total_poids: Math.floor(Math.random() * 15000 + 5000),
                prix_unitaire: Math.floor(Math.random() * 100 + 50),
                montant_ht: Math.floor(Math.random() * 500 + 200),
                frais_administratif: Math.floor(Math.random() * 50 + 10),
                taux_tva: 20,
                montant_tva: function() { return Math.floor(this.montant_ht * 0.2); },
                montant_ttc: function() { return this.montant_ht + this.montant_tva(); }
            });
            
            // Calculer les montants r√©els
            const ligne = lignesTransport[i - 1];
            ligne.montant_tva = Math.floor(ligne.montant_ht * 0.2);
            ligne.montant_ttc = ligne.montant_ht + ligne.montant_tva;
        }

        console.log('üìÑ G√©n√©ration PDF transport avec pagination...');
        const pdfTransport = await exportService.generateDocumentPdf(factureTransport, lignesTransport);
        const pathTransport = path.join(__dirname, 'pdf-ameliore-transport.pdf');
        fs.writeFileSync(pathTransport, pdfTransport);
        console.log(`‚úÖ PDF transport g√©n√©r√©: ${pathTransport}`);

        console.log('\nüéØ Am√©liorations impl√©ment√©es:');
        console.log('‚úÖ En-t√™te professionnel avec d√©grad√©s et encadr√©s color√©s');
        console.log('‚úÖ Informations client et transport dans des encadr√©s distincts');
        console.log('‚úÖ Tableau avec colonnes optimis√©es et alignement appropri√©');
        console.log('‚úÖ Pagination automatique avec en-t√™tes r√©p√©t√©s');
        console.log('‚úÖ Couleurs diff√©renci√©es par type de donn√©es (montants, dates, etc.)');
        console.log('‚úÖ Section totaux avec pr√©sentation encadr√©e et hi√©rarchis√©e');
        console.log('‚úÖ Pied de page professionnel avec informations l√©gales');
        console.log('‚úÖ Num√©rotation des pages pour documents longs');
        
        console.log('\nüìÅ Fichiers g√©n√©r√©s:');
        console.log(`   ‚Ä¢ ${pathNonTransport}`);
        console.log(`   ‚Ä¢ ${pathTransport}`);

    } catch (error) {
        console.error('‚ùå Erreur lors du test des am√©liorations:', error);
    } finally {
        console.log('\nüîö Fin du test des am√©liorations visuelles');
        process.exit(0);
    }
}

testAm√©liorationsVisuelles();